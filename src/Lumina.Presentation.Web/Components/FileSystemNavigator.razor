@using Lumina.Presentation.Web.Common.Models.FileManagement

<div id="navigator-view-mode-container">
    <img src="images/ui/list.png" id="navigator-list-view" alt="List View" title="List View" />
    <img src="images/ui/details.png" id="navigator-details-view" alt="Details View" title="Details View" />
    <img src="images/ui/small-icons.png" id="navigator-small-icons-view" alt="Small Icons View" title="Small Icons View" />
    <img src="images/ui/medium-icons.png" id="navigator-medium-icons-view" alt="Medium Icons View" title="Medium Icons View" />
    <img src="images/ui/large-icons.png" id="navigator-large-icons-view" alt="Large Icons View" title="Large Icons View" />
    <img src="images/ui/extra-large-icons.png" id="navigator-extra-large-icons-view" alt="Extra Large Icons View" title="Extra Large Icons View" />
</div>
<div id="navigator-navigation-controls-container">
    <div id="navigator-history">
        <img src="images/ui/back.svg" class="navigation-icon" alt="Back" title="Back" />
        <img src="images/ui/forward.svg" class="navigation-icon" alt="Forward" title="Forward" />
        <img src="images/ui/up.svg" class="navigation-icon" alt="Up One Level" title="Up One Level" />
    </div>
    <img src="images/ui/toggle-tree-view.svg" id="navigator-toggle-tree-view-button" alt="Toggle Tree View" title="Toggle Tree View" class="navigator-icon" />
    <img src="images/ui/toggle-thumbnails.svg" id="navigator-toggle-thumbnails-button" alt="Toggle Thumbnails" title="Toggle Thumbanils" class="navigator-icon" />
    <img src="images/ui/toggle-hidden.svg" id="navigator-toggle-hidden-button" alt="Toggle Hidden Files" title="Toggle Hidden Files" class="navigator-icon" />
</div>
<div id="navigator-address-bar-container">
    <div id="navigator-address-bar-group">
        <EnlightenmentInput CssClass="navigator-address-bar-input" Type="text" Value="@Path" Name="navigator-address-bar-input" AutoComplete="true" />
        <div id="navigator-address-bar">
            <ul id="navigator-path-segments"></ul>
        </div>
    </div>
    <EnlightenmentButton CssClass="navigator-edit-path-button" IsConfirmButton="false" Height="28" Width="35">
        <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path style="fill:#009BFC;fill-opacity:1;stroke:none"
                  d="m22.27 4l-18.27 18.27v5.73h5.73c0 0 18.269-18.269 18.27-18.27zm-2.865 4.299l4.297 4.297-11.701 11.703v-2.299h-4v-2.299zm-12.404 12.402v2.299h4v2.299l-1.701 1.701h-2l-2.297-2.297v-2z" />
        </svg>
    </EnlightenmentButton>
    <EnlightenmentButton CssClass="navigator-navigate-button" Height="28" Width="35">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M20 6L9 17L4 12" stroke="#0F9D58" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
    </EnlightenmentButton>
</div>

@code {
    [CascadingParameter(Name = "Path")] private string? Path { get; set; }
    [CascadingParameter(Name = "PathSeparator")] private string? PathSeparator { get; set; }
    [CascadingParameter(Name = "FileSystemType")] private FileSystemTypeModel? FileSystemType { get; set; }

    /// <summary>
    /// Method invoked when parameters receive values from the parent.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        if (Path is not null && PathSeparator is not null && FileSystemType is not null)
            if (!Path.EndsWith(PathSeparator))
                Path += PathSeparator;
        await base.OnParametersSetAsync().ConfigureAwait(false);
    }
}