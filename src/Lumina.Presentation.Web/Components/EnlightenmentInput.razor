@inject IJSRuntime JSRuntime

<input type="@Type"
       @ref="inputElement"
       style="width: @($"{Width}{(UsesPercentForWidth ? "%" : "px")}"); height: @($"{Height}{(UsesPercentForHeight ? "%" : "px")}");"
       class="enlightenment-input @CssClass"
       name="@Name"
       autocomplete="@(AutoComplete ? "on" : "off")"
       value="@Value"
       @oninput="OnInputHandlerAsync"
       @onkeydown="OnKeyDownAsync"
       placeholder="@Placeholder"
       disabled="@IsDisabled"
       readonly="@IsReadOnly"
       data-has-error="@HasError" 
       id="@Id" />

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public bool UsesPercentForHeight { get; set; }
    [Parameter] public bool UsesPercentForWidth { get; set; } = true;
    [Parameter] public int Width { get; set; } = 100;
    [Parameter] public int Height { get; set; } = 28;
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public string? Name { get; set; }
    [Parameter] public bool AutoComplete { get; set; } = true;
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public EventCallback OnEnterPressed { get; set; }
    [Parameter] public EventCallback OnEscapePressed { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsReadOnly { get; set; }
    [Parameter] public bool HasError { get; set; }

    private ElementReference inputElement;

    /// <summary>
    /// Handles the event risen after the component was rendered.
    /// </summary>
    /// <param name="firstRender">Indicates whether this is the first render or not.</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("windowKeyDownHandler", inputElement, DotNetObjectReference.Create(this));
    }

    /// <summary>
    /// Handles the input change event.
    /// </summary>
    /// <param name="e">The event arguments.</param>
    private async Task OnInputHandlerAsync(ChangeEventArgs e)
    {
        Value = e.Value?.ToString();
        await ValueChanged.InvokeAsync(Value).ConfigureAwait(false);
    }

    /// <summary>
    /// Handles the key down event.
    /// </summary>
    /// <param name="e">The event arguments.</param>
    private async Task OnKeyDownAsync(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Code == "NumpadEnter")
            await OnEnterPressed.InvokeAsync();
    }

    /// <summary>
    /// Handles the Escape key pressed.
    /// </summary>
    [JSInvokable]
    public void EscapePressed()
    {
        OnEscapePressed.InvokeAsync(Value);
    }
}