@using Lumina.Presentation.Web.Common.Enums.FileSystem
@using Lumina.Presentation.Web.Common.Models.FileManagement

<div class="tree-node">
    <span class="node-content @(IsSelected ? "selected" : string.Empty)" @onclick="HandleNodeClick">
        @if (Node.ItemType == FileSystemItemType.Directory || Node.ItemType == FileSystemItemType.Root)
        {
            <span class="expand-button @(Node.IsExpanded ? "expanded" : string.Empty)" @onclick:stopPropagation="true" @onclick="ToggleExpand"></span>
        }
        else
        {
            <span class="spacer"></span>
        }
        <span class="node-icon">@GetNodeIcon()</span>
        <span class="node-name">@Node.Name</span>
    </span>
    @if (Node.IsExpanded && Node.Children is not null)
    {
        <div class="child-nodes">
            @foreach (var childNode in Node.Children)
            {
                <FileSystemTreeViewNode Node="childNode" OnExpand="OnExpand" OnNodeSelected="OnNodeSelected" SelectedNodePath="@SelectedNodePath" />
            }
        </div>
    }
</div>

@code {
    [Parameter] public FileSystemTreeNodeModel Node { get; set; } = null!;
    [Parameter] public EventCallback<FileSystemTreeNodeModel> OnExpand { get; set; }
    [Parameter] public EventCallback<string> OnNodeSelected { get; set; }
    [Parameter] public string? SelectedNodePath { get; set; }

    private bool IsSelected => Node.Path == SelectedNodePath;

    /// <summary>
    /// Toggles the expanded state of the node.
    /// </summary>
    private async Task ToggleExpand()
    {
        await OnExpand.InvokeAsync(Node).ConfigureAwait(false);
    }

    /// <summary>
    /// Handles the click event on the node.
    /// </summary>
    private async Task HandleNodeClick()
    {
        await OnNodeSelected.InvokeAsync(Node.Path).ConfigureAwait(false);
    }

    /// <summary>
    /// Gets the icon of the node, based on it type.
    /// </summary>
    /// <returns>The icon on the node</returns>
    private string GetNodeIcon()
    {
        return Node.ItemType switch
        {
            FileSystemItemType.Root => "💿",
            FileSystemItemType.Directory => Node.IsExpanded ? "📂" : "📁",
            FileSystemItemType.File => "📄",
            _ => "❓"
        };
    }
}