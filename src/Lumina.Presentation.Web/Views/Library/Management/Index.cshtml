@*
/library/manage
*@

@using Lumina.Presentation.Web.Common.Models.Libraries
@using Lumina.Presentation.Web.Common.Services
@using Microsoft.AspNetCore.Mvc.Localization

@{
    // generate a unique id for the scripts section of this view, so it can be dynamically loaded/unloaded by the global AJAX navigator handler
    var scriptId = ScriptIdentifierHelper.GenerateScriptId();
}

@inject IUrlService _urlService
@inject IViewLocalizer _localizer

<div style="display: grid; grid-template-rows: auto 1fr;"><!--container with two rows, one fixed, one filling remaining space-->
    <div style="min-height: 1rem;"></div><!--the first row is a dummy row for "margin", because setting a margin on the next row would offset the parent's position-->
    <div class="enlightenment-panel shadow-effect mx-auto panel w-75 mb-10" style="min-width: 320px;">
        <div class="shine-effect"></div>
        <div class="form-row">
            <h1 class="text-light-two w-100 text-center pt-0 pb-0 engraved-title">
                @_localizer["Libraries"]
            </h1>
        </div>
        <table id="media-libraries-table" style="display: none;">
            <thead class="text-light-two">
                <tr>
                    <th class="w-30">@_localizer["Title"]</th>
                    <th class="w-30">@_localizer["LibraryType"]</th>
                    <th class="w-10">@_localizer["Enabled"]</th>
                    <th class="w-10">@_localizer["Locked"]</th>
                    <th class="w-20">@_localizer["Actions"]</th>
                </tr>
            </thead>
            <tbody>
                <!-- libraries will be populated here -->
            </tbody>
        </table>
        <div class="form-row pt-10">
            <button id="btn-scan-all-libraries" style="display: none;" type="button" class="confirm-button w-250px">@_localizer["ScanAllLibraries"]</button>
            <button id="btn-cancel-libraries-scan" style="display: none;" type="button" class="abort-button w-180px">@_localizer["CancelScan"]</button>
        </div>
        <p id="no-media-libaries" class="text-center">@_localizer["NoLibraries"]</p>
    </div>
</div>
@section Scripts {
    <script type="text/javascript" data-form="@scriptId" defer>
        // create cleanup registry for this view
        const cleanupFunctions = [];
        let isInitialized = false;
        const jsLocalizedLibraryTypes = {
            Book: '@_localizer["Book"]',
            EBook: '@_localizer["EBook"]',
            BookSeries: '@_localizer["BookSeries"]',
            ComicBook: '@_localizer["ComicBook"]',
            ComicSeries: '@_localizer["ComicSeries"]',
            Magazine: '@_localizer["Magazine"]',
            Manga: '@_localizer["Manga"]',
            GraphicNovel: '@_localizer["GraphicNovel"]',
            AcademicPaper: '@_localizer["AcademicPaper"]',
            SheetMusic: '@_localizer["SheetMusic"]',
            Screenplay: '@_localizer["Screenplay"]',
            TvShow: '@_localizer["TvShow"]',
            Movie: '@_localizer["Movie"]',
            FilmSeries: '@_localizer["FilmSeries"]',
            FilmFranchise: '@_localizer["FilmFranchise"]',
            Concert: '@_localizer["Concert"]',
            Documentary: '@_localizer["Documentary"]',
            Tutorial: '@_localizer["Tutorial"]',
            Personal: '@_localizer["Personal"]',
            Anime: '@_localizer["Anime"]',
            Youtube: '@_localizer["Youtube"]',
            Videoclip: '@_localizer["Videoclip"]',
            Music: '@_localizer["Music"]',
            AudioBook: '@_localizer["AudioBook"]',
            LivePerformance: '@_localizer["LivePerformance"]',
            Interview: '@_localizer["Interview"]',
            Cover: '@_localizer["Cover"]',
            Remix: '@_localizer["Remix"]',
            Soundeffect: '@_localizer["Soundeffect"]',
            Podcast: '@_localizer["Podcast"]',
            RadioShow: '@_localizer["RadioShow"]',
            PhotoAlbum: '@_localizer["PhotoAlbum"]',
            Other: '@_localizer["Other"]'
        };
        const btnScanAllLibraries = document.getElementById('btn-scan-all-libraries');
        const btnCancelLibrariesScan = document.getElementById('btn-cancel-libraries-scan');

        // on view load
        const loadLibrariesAsync = async function() {
            const response = await callApiGetAsync('@_urlService.GetAbsoluteUrl("GetLibraries", "LibraryManagement")');
            const table = document.getElementById('media-libraries-table');
            const tbody = table.querySelector('tbody') || table.appendChild(document.createElement('tbody'));
            const noMediaLibrary = document.getElementById('no-media-libaries');
            
            if (response && response.length > 0) {
                table.style.display = 'table';
                noMediaLibrary.style.display = 'none';
                btnScanAllLibraries.style.display = 'block';
                tbody.innerHTML = response.map(library => {
                    const editUrl = '@_urlService.GetAbsoluteUrl("EditLibrary", "LibraryManagement", new { id = default(Guid) })'
                        .replace('/@(default(Guid))', `/${library.id}`);
                    return `
                        <tr data-library-id="${library.id}">
                            <td title="${library.title}">${library.title}</td>
                            <td>${jsLocalizedLibraryTypes[library.libraryType]}</td>
                            <td class="text-center">${library.isEnabled === true ? `@_localizer["Yes"]` : `@_localizer["No"]`}</td>
                            <td class="text-center">${library.isLocked === true ? `@_localizer["Yes"]` : `@_localizer["No"]`}</td>
                            <td class="text-end">
                                <img src="/images/ui/stop.svg" alt="@_localizer["CancelScan"]" title="@_localizer["Scan"]" class="hidden remove-form-table-row-icon" />
                                <img src="/images/ui/trigger.svg" alt="@_localizer["Scan"]" title="@_localizer["Scan"]" class="remove-form-table-row-icon" />
                                <a href="${editUrl}">
                                    <img src="/images/ui/edit.svg" alt="@_localizer["Edit"]" title="@_localizer["Edit"]" class="remove-form-table-row-icon" />
                                </a>
                                <img src="/images/ui/delete.svg" alt="@_localizer["Remove"]" title="@_localizer["Remove"]" class="remove-form-table-row-icon" />
                            </td>
                        </tr>
                    `;
                }).join('');
            } else {
                btnScanAllLibraries.style.display = 'none';
                table.style.display = 'none';
                noMediaLibrary.style.display = 'block';
            }
        };

        // on delete library icon click
        const handleDeleteLibraryClick = async function(e) {
            if (e.target.matches('img[src*="delete.svg"]')) {
                const row = e.target.closest('tr');
                
                if (await dialogService.show('@_localizer["DeleteLibraryConfirm"]', jsLocalizedDialogs.confirmation, DialogButtons.YES_NO, DialogIcon.QUESTION) === DialogButton.YES) {
                    const libraryId = row.getAttribute('data-library-id');
                    const url = '@_urlService.GetAbsoluteUrl("DeleteLibrary", "LibraryManagement", new { id = default(Guid) })';
                    const success = await callApiDeleteAsync(url.replace('/@(default(Guid))', `/${libraryId}`));
            
                    if (success) {
                        await loadLibrariesAsync(); // reload the entire library list
                        notificationService.show('@_localizer["LibraryDeleted"]', NotificationType.SUCCESS);
                    }
                }
            }
        };

        // on scan all libraries button click
        const handleScanAllLibrariesClick = async function(e) {
            const data = await callApiPostAsync('@_urlService.GetAbsoluteUrl("ScanAllLibraries", "LibraryManagement")', {});
            if (data) {                
                btnScanAllLibraries.style.display = 'none';
                btnCancelLibrariesScan.style.display = 'block';

                // toggle icons only for libraries that had their scan started
                const tbody = document.querySelector('tbody');
                data.forEach(scan => {
                    const row = tbody.querySelector(`tr[data-library-id="${scan.libraryId}"]`);
                    if (row) {
                        const scanIcon = row.querySelector('img[src*="trigger.svg"]');
                        const cancelScanIcon = row.querySelector('img[src*="stop.svg"]');

                        scanIcon.classList.add('hidden');
                        cancelScanIcon.classList.remove('hidden');
                    }
                });
            }
        };

        // on scan library icon click
        const handleScanLibraryClick = async function(e) {
            if (e.target.matches('img[src*="trigger.svg"]')) {
                const row = e.target.closest('tr');
               
                const libraryId = row.getAttribute('data-library-id');
                const url = '@_urlService.GetAbsoluteUrl("ScanLibrary", "LibraryManagement", new { id = default(Guid) })';
                const success = await callApiPostAsync(url.replace('/@(default(Guid))', `/${libraryId}`));

                if (success) {
                    const scanIcon = e.target;
                    const cancelScanIcon = row.querySelector('img[src*="stop.svg"]');

                    scanIcon.classList.add('hidden');
                    cancelScanIcon.classList.remove('hidden');
                }
            }
        };

        // on cancel all libraries scan button click
        const handleCancelLibrariesScanClick = async function(e) {
            await callApiPostAsync('@_urlService.GetAbsoluteUrl("CancelLibrariesScan", "LibraryManagement")', {});
            btnCancelLibrariesScan.style.display = 'none';
            btnScanAllLibraries.style.display = 'block';

            // toggle icons for all rows
            const tbody = document.querySelector('tbody');
            const allRows = tbody.querySelectorAll('tr');

            allRows.forEach(row => {
                const scanIcon = row.querySelector('img[src*="trigger.svg"]');
                const cancelScanIcon = row.querySelector('img[src*="stop.svg"]');

                scanIcon.classList.remove('hidden');
                cancelScanIcon.classList.add('hidden');
            });
        };

        // on cancel library scan icon click
        const handleCancelLibraryScanClick = async function(e) {
            if (e.target.matches('img[src*="stop.svg"]')) {
                const row = e.target.closest('tr');

                const libraryId = row.getAttribute('data-library-id');
                const url = '@_urlService.GetAbsoluteUrl("CancelLibraryScan", "LibraryManagement", new { id = default(Guid) })';
                await callApiPostAsync(url.replace('/@(default(Guid))', `/${libraryId}`));
                const scanIcon = row.querySelector('img[src*="trigger.svg"]');
                const cancelScanIcon = row.querySelector('img[src*="stop.svg"]');

                scanIcon.classList.remove('hidden');
                cancelScanIcon.classList.add('hidden');
            }
        };

        // add listeners
        btnScanAllLibraries.addEventListener('click', handleScanAllLibrariesClick);
        btnCancelLibrariesScan.addEventListener('click', handleCancelLibrariesScanClick);
        document.addEventListener('click', handleDeleteLibraryClick);
        document.addEventListener('click', handleScanLibraryClick);
        document.addEventListener('click', handleCancelLibraryScanClick);
        document.addEventListener('DOMContentLoaded', InitializeAsync);

        // register cleanup for these listeners
        cleanupFunctions.push(() => {
            btnScanAllLibraries.removeEventListener('click', handleScanAllLibrariesClick);
            btnCancelLibrariesScan.removeEventListener('click', handleCancelLibrariesScanClick);
            document.removeEventListener('click', handleDeleteLibraryClick);
            document.removeEventListener('click', handleScanLibraryClick);
            document.removeEventListener('click', handleCancelLibraryScanClick);
            document.removeEventListener('DOMContentLoaded', InitializeAsync);
        });

        // store all cleanups for this view on window object using the scriptId
        window.viewCleanups = window.viewCleanups || {};
        window.viewCleanups['@scriptId'] = () => {
            cleanupFunctions.forEach(cleanup => cleanup());
            console.log(`Unloaded @scriptId`);
        };

        async function InitializeAsync() {
            if (isInitialized)
                return;
            isInitialized = true;
            await loadLibrariesAsync();
        }

        console.log(`Loaded @scriptId`);
    </script>
}
