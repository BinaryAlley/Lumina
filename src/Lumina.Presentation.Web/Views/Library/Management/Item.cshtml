@*
/library/manage/item/{id:guid}
*@

@using Lumina.Presentation.Web.Common.Models.Libraries
@using Lumina.Presentation.Web.Common.Services

@{
    var id = Context.Request.RouteValues["id"] as string;
    // generate a unique id for the scripts section of this view, so it can be dynamically loaded/unloaded by the global AJAX navigator handler
    var scriptId = ScriptIdentifierHelper.GenerateScriptId();
}

@inject IUrlService _urlService

@model LibraryModel

@await Component.InvokeAsync("FileSystemBrowser")

<div class="enlightenment-panel shadow-effect p-2 mx-auto panel w-50 mb-10" style="min-width: 320px; margin-top: 1rem;">
    <div class="shine-effect"></div>
    <form asp-controller="LibraryManagement" asp-action="EditLibrary" method="post" id="add-media-library-form" class="inline">
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="Id" value="@id" />
        <input type="hidden" asp-for="UserId" value="@Model.UserId"/>
        <div class="form-row">
            <h1 class="text-light-two w-100 text-center pt-0 pb-0 engraved-title">@(id is not null ? "Edit" : "Add New") Library</h1>
        </div>
        <div class="form-container">
            <h3 class="text-light-two">General Information</h3>
            <!-- Title -->
            <div class="form-row">
                <div class="form-label">
                    <label asp-for="Title">Title</label>
                    <span class="mandatory-field">*</span>:
                </div>
                <div class="form-field">
                    <input asp-for="Title" class="enlightenment-input" />
                </div>
                <small class="form-label text-disabled form-description">DescriptionTitle</small>
            </div>
            <!-- Library Type -->
            <div class="form-row">
                <div class="form-label">
                    <label asp-for="LibraryType">Library Type</label>
                    <span class="mandatory-field">*</span>:
                </div>
                <div class="form-field">
                    <div class="enlightenment-combobox inline-block w-100">
                        <div class="shine-effect" style="top: 1px;"></div>
                        <input type="checkbox" class="enlightenment-toggle-checkbox" id="library-type" />
                        <label class="enlightenment-toggle" for="library-type">
                            <span class="enlightenment-selected-text">@Model.LibraryType</span>
                        </label>
                        <div class="enlightenment-dropdown">
                            <div class="shine-effect" style="top: -4px;"></div>
                            <!-- Dropdown options remain the same -->
                            <div class="enlightenment-option first-option disabled">Written Content</div>
                            <div class="enlightenment-option" data-value="Book">Book</div>
                            <div class="enlightenment-option" data-value="EBook">E Book</div>
                            <div class="enlightenment-option" data-value="BookSeries">Book Series</div>
                            <div class="enlightenment-option" data-value="ComicBook">Comic Book</div>
                            <div class="enlightenment-option" data-value="ComicSeries">Comic Series</div>
                            <div class="enlightenment-option" data-value="Magazine">Magazine</div>
                            <div class="enlightenment-option" data-value="Manga">Manga</div>
                            <div class="enlightenment-option" data-value="GraphicNovel">Graphic Novel</div>
                            <div class="enlightenment-option" data-value="AcademicPaper">Academic Paper</div>
                            <div class="enlightenment-option" data-value="SheetMusic">Sheet Music</div>
                            <div class="enlightenment-option" data-value="Screenplay">Screenplay</div>
                            <div class="enlightenment-option disabled">Video Content</div>
                            <div class="enlightenment-option" data-value="TvShow">Tv Show</div>
                            <div class="enlightenment-option" data-value="Movie">Movie</div>
                            <div class="enlightenment-option" data-value="FilmSeries">Film Series</div>
                            <div class="enlightenment-option" data-value="FilmFranchise">Film Franchise</div>
                            <div class="enlightenment-option" data-value="Concert">Concert</div>
                            <div class="enlightenment-option" data-value="Documentary">Documentary</div>
                            <div class="enlightenment-option" data-value="Tutorial">Tutorial</div>
                            <div class="enlightenment-option" data-value="Personal">Personal</div>
                            <div class="enlightenment-option" data-value="Anime">Anime</div>
                            <div class="enlightenment-option" data-value="Youtube">Youtube</div>
                            <div class="enlightenment-option" data-value="Videoclip">Videoclip</div>
                            <div class="enlightenment-option disabled">Audio Content</div>
                            <div class="enlightenment-option" data-value="Music">Music</div>
                            <div class="enlightenment-option" data-value="AudioBook">Audio Book</div>
                            <div class="enlightenment-option" data-value="LivePerformance">Live Performance</div>
                            <div class="enlightenment-option" data-value="Interview">Interview</div>
                            <div class="enlightenment-option" data-value="Cover">Cover</div>
                            <div class="enlightenment-option" data-value="Remix">Remix</div>
                            <div class="enlightenment-option" data-value="Soundeffect">Soundeffect</div>
                            <div class="enlightenment-option" data-value="Podcast">Podcast</div>
                            <div class="enlightenment-option" data-value="RadioShow">Radio Show</div>
                            <div class="enlightenment-option disabled">Visual Content</div>
                            <div class="enlightenment-option" data-value="PhotoAlbum">Photo Album</div>
                            <div class="enlightenment-option disabled">Miscellaneous Content</div>
                            <div class="enlightenment-option last-option" data-value="Other">Other</div>
                        </div>
                    </div>
                </div>
                <small class="form-label text-disabled form-description">DescriptionLibraryType</small>
            </div>
            <!-- Directories -->
            <div class="form-row mt-10">
                <div class="form-label">
                    <label asp-for="ContentLocations">Directories</label>
                    <span class="mandatory-field">*</span>:
                    <img src="~/images/ui/add-directory.svg" alt="Add directory" id="add-media-directory" title="Add directory" class="add-form-table-row-icon ml-5" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-table w-100">
                    @for (int i = 0; i < Model.ContentLocations.Count; i++)
                    {
                        <div class="form-table-row">
                            <span title="@Model.ContentLocations[i]">@Model.ContentLocations[i]</span>
                            <img src="~/images/ui/delete.svg" alt="Remove" title="Remove" class="remove-form-table-row-icon" />
                        </div>
                    }
                </div>
                <small class="form-label text-disabled form-description">DescriptionDirectories</small>
            </div>
            <div class="form-row">
                <button type="submit" class="confirm-button w-100px">Save</button>
            </div>
        </div>
    </form>
    <!-- section success -->
    <div class="text-center w-100">
        <p id="save-success" class="text-light-one w-100 hidden">Library Saved</p>
        <button id="btn-back-to-libraries" type="button" class="abort-button h-22px w-150px mx-auto mt-10 hidden">Back To Libraries</button>
        <button id="btn-add-new-library" type="button" class="confirm-button h-22px w-150px mx-auto mt-10 hidden">Add New Library</button>
    </div>
</div>
@section Scripts {
    <script type="text/javascript" data-form="@scriptId" defer>
        const saveSuccess = document.getElementById('save-success');
        const btnBackToLibraries = document.getElementById('btn-back-to-libraries');
        const btnAddNewLibrary = document.getElementById('btn-add-new-library');

        document.getElementById('add-media-library-form').addEventListener('keypress', async (event) => {
            if (event.key === 'Enter') {
                event.preventDefault();
                const form = event.target.closest('form');
                await handleAddMediaLibrary(form);
            }
        });

        document.getElementById('add-media-library-form').addEventListener('submit', async (event) => {
            event.preventDefault();
            await handleAddMediaLibrary(event.target);
        });

        async function handleAddMediaLibrary(form) {
            const formData = {
                Id: form.querySelector('[name="Id"]').value || null,
                UserId: form.querySelector('[name="UserId"]').value || null,
                Title: form.querySelector('[name="Title"]').value,
                LibraryType: form.querySelector('.enlightenment-selected-text').textContent,
                ContentLocations: Array.from(form.querySelectorAll('.form-table-row span'))
                    .map(span => span.textContent)
            };
            const data = await callApiPostAsync('@_urlService.GetAbsoluteUrl("SaveLibrary", "LibraryManagement")', formData);
            if (data) {
                form.classList.replace('inline', 'hidden');
                saveSuccess.classList.replace('hidden', 'inline');
                btnAddNewLibrary.classList.replace('hidden', 'block');
                btnBackToLibraries.classList.replace('hidden', 'block');
            }
        }

        btnBackToLibraries.addEventListener('click', () => {
            window.location.href = '@_urlService.GetAbsoluteUrl("Index", "LibraryManagement")';
        });

        btnAddNewLibrary.addEventListener('click', () => {
            window.location.href = '@_urlService.GetAbsoluteUrl("EditLibrary", "LibraryManagement")';
        });

        document.getElementById('add-media-directory').addEventListener('click', function () {
            showFileSystemBrowserDialogAsync('C:\\Users\\', true, false, addNewPaths); // TODO: take path and include hidden elements from settings
        });

        document.querySelectorAll('.remove-form-table-row-icon').forEach(icon => {
            icon.addEventListener('click', function () {
                this.parentElement.remove();
            });
        });

        function addNewPaths(selectedPaths) {
            // get the form table where the new paths will be added
            const formTable = document.querySelector('.form-table');
            // process the selected paths
            const paths = selectedPaths.slice(1, -1).split('","');
            // add each path as a new row
            paths.forEach(path => {
                // check if path already exists
                const existingPath = formTable.querySelector(`span[title="${path}"]`);
                if (!existingPath) {
                    formTable.insertAdjacentHTML('beforeend', `
                        <div class="form-table-row">
                            <span title="${path}">${path}</span>
                            <img src="/images/ui/delete.svg" alt="Remove" title="Remove" class="remove-form-table-row-icon" onclick="this.closest('.form-table-row').remove();" />
                        </div>
                    `);
                }
            });
        }
    </script>
}
