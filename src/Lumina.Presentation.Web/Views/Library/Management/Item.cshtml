@*
/library/manage/item/{id:guid}
*@

@using Lumina.Presentation.Web.Common.Models.Libraries
@using Lumina.Presentation.Web.Common.Services
@using Microsoft.AspNetCore.Mvc.Localization

@{
    var id = Context.Request.RouteValues["id"] as string;
    // generate a unique id for the scripts section of this view, so it can be dynamically loaded/unloaded by the global AJAX navigator handler
    var scriptId = ScriptIdentifierHelper.GenerateScriptId();
}

@inject IUrlService _urlService
@inject IViewLocalizer _localizer

@model LibraryModel

@await Component.InvokeAsync("FileSystemBrowser")

<div style="display: grid; grid-template-rows: auto 1fr;"><!--container with two rows, one fixed, one filling remaining space-->
    <div style="min-height: 1rem;"></div><!--the first row is a dummy row for "margin", because setting a margin on the next row would offset the parent's position-->
    <div class="enlightenment-panel shadow-effect p-2 mx-auto panel w-50 mb-10" style="min-width: 320px;">
        <div class="shine-effect"></div>
        <form method="post" id="add-media-library-form" class="inline">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="Id" value="@id" />
            <input type="hidden" asp-for="UserId" value="@Model.UserId"/>
            <div class="form-row">
                <h1 class="text-light-two w-100 text-center pt-0 pb-0 engraved-title">
                    @(_localizer[id is not null ? "EditLibrary" : "AddNewLibrary"])
                </h1>
            </div>
            <div class="form-container">
                <h3 class="text-light-two">@_localizer["GeneralInformation"]</h3>
                <!-- Title -->
                <div class="form-row">
                    <div class="form-label">
                        <label asp-for="Title">@_localizer["Title"]</label>
                        <span class="mandatory-field">*</span>:
                    </div>
                    <div class="form-field">
                        <input asp-for="Title" class="enlightenment-input" />
                    </div>
                    <small class="form-label text-disabled form-description">@_localizer["DescriptionTitle"]</small>
                </div>
                <!-- Library Type -->
                <div class="form-row">
                    <div class="form-label">
                        <label asp-for="LibraryType">@_localizer["LibraryType"]</label>
                        <span class="mandatory-field">*</span>:
                    </div>
                    <div class="form-field">
                        <div class="enlightenment-combobox inline-block w-100">
                            <div class="shine-effect" style="top: 1px;"></div>
                            <input type="checkbox" class="enlightenment-toggle-checkbox" id="library-type" />
                            <label class="enlightenment-toggle" for="library-type">
                                <span id="library-selected-item" class="enlightenment-selected-text" data-value="@(Model.LibraryType ?? "Book")">@(Model.LibraryType ?? _localizer["Book"].Value)</span>
                            </label>
                            <div class="enlightenment-dropdown">
                                <div class="shine-effect" style="top: -4px;"></div>
                                <div class="enlightenment-option first-option disabled">@_localizer["WrittenContent"]</div>
                                <div class="enlightenment-option" data-value="Book">@_localizer["Book"]</div>
                                <div class="enlightenment-option" data-value="EBook">@_localizer["EBook"]</div>
                                <div class="enlightenment-option" data-value="BookSeries">@_localizer["BookSeries"]</div>
                                <div class="enlightenment-option" data-value="ComicBook">@_localizer["ComicBook"]</div>
                                <div class="enlightenment-option" data-value="ComicSeries">@_localizer["ComicSeries"]</div>
                                <div class="enlightenment-option" data-value="Magazine">@_localizer["Magazine"]</div>
                                <div class="enlightenment-option" data-value="Manga">@_localizer["Manga"]</div>
                                <div class="enlightenment-option" data-value="GraphicNovel">@_localizer["GraphicNovel"]</div>
                                <div class="enlightenment-option" data-value="AcademicPaper">@_localizer["AcademicPaper"]</div>
                                <div class="enlightenment-option" data-value="SheetMusic">@_localizer["SheetMusic"]</div>
                                <div class="enlightenment-option" data-value="Screenplay">@_localizer["Screenplay"]</div>
                                <div class="enlightenment-option disabled">@_localizer["VideoContent"]</div>
                                <div class="enlightenment-option" data-value="TvShow">@_localizer["TvShow"]</div>
                                <div class="enlightenment-option" data-value="Movie">@_localizer["Movie"]</div>
                                <div class="enlightenment-option" data-value="FilmSeries">@_localizer["FilmSeries"]</div>
                                <div class="enlightenment-option" data-value="FilmFranchise">@_localizer["FilmFranchise"]</div>
                                <div class="enlightenment-option" data-value="Concert">@_localizer["Concert"]</div>
                                <div class="enlightenment-option" data-value="Documentary">@_localizer["Documentary"]</div>
                                <div class="enlightenment-option" data-value="Tutorial">@_localizer["Tutorial"]</div>
                                <div class="enlightenment-option" data-value="Personal">@_localizer["Personal"]</div>
                                <div class="enlightenment-option" data-value="Anime">@_localizer["Anime"]</div>
                                <div class="enlightenment-option" data-value="Youtube">@_localizer["Youtube"]</div>
                                <div class="enlightenment-option" data-value="Videoclip">@_localizer["Videoclip"]</div>
                                <div class="enlightenment-option disabled">@_localizer["AudioContent"]</div>
                                <div class="enlightenment-option" data-value="Music">@_localizer["Music"]</div>
                                <div class="enlightenment-option" data-value="AudioBook">@_localizer["AudioBook"]</div>
                                <div class="enlightenment-option" data-value="LivePerformance">@_localizer["LivePerformance"]</div>
                                <div class="enlightenment-option" data-value="Interview">@_localizer["Interview"]</div>
                                <div class="enlightenment-option" data-value="Cover">@_localizer["Cover"]</div>
                                <div class="enlightenment-option" data-value="Remix">@_localizer["Remix"]</div>
                                <div class="enlightenment-option" data-value="Soundeffect">@_localizer["Soundeffect"]</div>
                                <div class="enlightenment-option" data-value="Podcast">@_localizer["Podcast"]</div>
                                <div class="enlightenment-option" data-value="RadioShow">@_localizer["RadioShow"]</div>
                                <div class="enlightenment-option disabled">@_localizer["VisualContent"]</div>
                                <div class="enlightenment-option" data-value="PhotoAlbum">@_localizer["PhotoAlbum"]</div>
                                <div class="enlightenment-option disabled">@_localizer["MiscellaneousContent"]</div>
                                <div class="enlightenment-option last-option" data-value="Other">@_localizer["Other"]</div>
                            </div>
                        </div>
                    </div>
                    <small class="form-label text-disabled form-description">@_localizer["DescriptionLibraryType"]</small>
                </div>
                <!-- Cover -->
                <div class="form-row mt-10">
                    <div class="form-label">
                        <label asp-for="CoverImage">@_localizer["CoverImage"]</label>:
                        <img src="~/images/ui/add-file.svg" alt="@_localizer["AddImage"]" id="add-media-cover" title="@_localizer["AddImage"]" class="add-form-table-row-icon ml-5" />
                    </div>
                </div>
                <div class="form-row">
                    <div id="add-media-cover-form-table" class="form-table w-100">
                        @if (Model.CoverImage is not null)
                        {
                        <div class="form-table-row">
                            <span title="@Model.CoverImage">@Model.CoverImage</span>
                            <img src="~/images/ui/delete.svg" alt="@_localizer["Remove"]" title="@_localizer["Remove"]" class="remove-form-table-row-icon" />
                        </div>
                        }
                    </div>
                    <small class="form-label text-disabled form-description">@_localizer["DescriptionCover"]</small>
                </div>
                <!-- Directories -->
                <div class="form-row mt-10">
                    <div class="form-label">
                        <label asp-for="ContentLocations">@_localizer["Directories"]</label>
                        <span class="mandatory-field">*</span>:
                        <img src="~/images/ui/add-directory.svg" alt="@_localizer["AddDirectory"]" id="add-media-directory" title="@_localizer["AddDirectory"]" class="add-form-table-row-icon ml-5" />
                    </div>
                </div>
                <div class="form-row">
                    <div id="add-media-directory-form-table" class="form-table w-100">
                        @for (int i = 0; i < Model.ContentLocations.Count; i++)
                        {
                            <div class="form-table-row">
                                <span title="@Model.ContentLocations[i]">@Model.ContentLocations[i]</span>
                                <img src="~/images/ui/delete.svg" alt="@_localizer["Remove"]" title="@_localizer["Remove"]" class="remove-form-table-row-icon" />
                            </div>
                        }
                    </div>
                    <small class="form-label text-disabled form-description">@_localizer["DescriptionDirectories"]</small>
                </div>
                <div class="form-row">
                    <button type="submit" class="confirm-button w-100px">@_localizer["Save"]</button>
                </div>
            </div>
        </form>
        <!-- section success -->
        <div class="text-center w-100">
            <p id="save-success" class="text-light-one w-100 hidden">@_localizer["LibrarySaved"]</p>
            <button id="btn-back-to-libraries" type="button" class="abort-button h-22px w-180px mx-auto mt-10 hidden">@_localizer["BackToLibraries"]</button>
            <button id="btn-add-new-library" type="button" class="confirm-button h-22px w-180px mx-auto mt-10 hidden">@_localizer["AddNewLibrary"]</button>
        </div>
    </div>
</div>
@section Scripts {
    <script type="text/javascript" data-form="@scriptId" defer>
        // create cleanup registry for this view
        const cleanupFunctions = [];

        const saveSuccess = document.getElementById('save-success');
        const btnBackToLibraries = document.getElementById('btn-back-to-libraries');
        const btnAddNewLibrary = document.getElementById('btn-add-new-library');
        const form = document.getElementById('add-media-library-form');
        const imgAddMediaDirectory = document.getElementById('add-media-directory');
        const imgAddCover = document.getElementById('add-media-cover');
        const mediaCoverFormTable = document.getElementById('add-media-cover-form-table');
        const mediaDirectoriesFormTable = document.getElementById('add-media-directory-form-table');

        // create new or update existing media library
        async function handleAddMediaLibraryAsync() {
            const formData = {
                Id: form.querySelector('[name="Id"]').value || null,
                UserId: form.querySelector('[name="UserId"]').value || null,
                Title: form.querySelector('[name="Title"]').value,
                LibraryType: form.querySelector('#library-selected-item').getAttribute('data-value'),
                ContentLocations: Array.from(mediaDirectoriesFormTable.querySelectorAll('.form-table-row span'))
                    .map(span => span.textContent),
                CoverImage: (() => {
                    // get the first (and only) span in the mediaCoverFormTable, if it exists
                    const coverSpan = mediaCoverFormTable.querySelector('.form-table-row span');
                    return coverSpan ? coverSpan.textContent : null; // return null if no cover image is selected
                })()
            };
            const data = await callApiPostAsync('@_urlService.GetAbsoluteUrl("SaveLibrary", "LibraryManagement")', formData);
            if (data) {
                form.classList.replace('inline', 'hidden');
                saveSuccess.classList.replace('hidden', 'inline');
                btnAddNewLibrary.classList.replace('hidden', 'block');
                btnBackToLibraries.classList.replace('hidden', 'block');
            }
        }

        function addMediaLibraryDirectories(selectedPaths) {
            // process the selected paths (remove quotes and split by comma)
            const paths = selectedPaths.slice(1, -1).split('","');
            // add each path as a new row
            paths.forEach(path => {
                // normalize the path for comparison
                const normalizedPath = path.replace(/\\\\/g, '\\');
                // use querySelectorAll and compare explicitly, so that duplicates are not permitted 
                const existingPaths = Array.from(mediaDirectoriesFormTable.querySelectorAll('span[title]'));
                const isDuplicate = existingPaths.some(span => span.getAttribute('title') === normalizedPath);
                if (!isDuplicate) {
                    mediaDirectoriesFormTable.insertAdjacentHTML('beforeend', `
                        <div class="form-table-row">
                            <span title="${normalizedPath}">${normalizedPath}</span>
                            <img src="/images/ui/delete.svg" alt="@_localizer["Remove"]" title="@_localizer["Remove"]" class="remove-form-table-row-icon" onclick="this.closest('.form-table-row').remove();" />
                        </div>
                    `);
                }
            });
        }

        function addMediaLibraryCoverImage(selectedPaths) {
            // process the selected paths
            const paths = selectedPaths.slice(1, -1).split('","');
            // ensure only one row is allowed by first clearing all previous rows
            mediaCoverFormTable.innerHTML = ''; 
            // add the first valid path (if any) as a new row
            if (paths.length > 0) {
                const path = paths[0]; // only use the first path
                mediaCoverFormTable.insertAdjacentHTML('beforeend', `
                    <div class="form-table-row">
                        <span title="${path}">${path}</span>
                        <img src="/images/ui/delete.svg" alt="@_localizer["Remove"]" title="@_localizer["Remove"]" class="remove-form-table-row-icon" onclick="this.closest('.form-table-row').remove();" />
                    </div>
                `);
            }
        }


        // on Enter key pressed
        const handleEnterKey = async function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                await handleAddMediaLibraryAsync();
            }
        };

        // on form submit event
        const handleSubmit = async function(e) {
            e.preventDefault();
            await handleAddMediaLibraryAsync();
        };

        // on back to libraries button click
        const handleBtnBackToLibrariesClick = function() {
            window.location.href = '@_urlService.GetAbsoluteUrl("Index", "LibraryManagement")';
        };

        // on add new library button click
        const handleBtnAddNewLibraryClick = function() {
            window.location.href = '@_urlService.GetAbsoluteUrl("EditLibrary", "LibraryManagement")';
        };

        // on add media directory image click
        const handleImgAddMediaDirectoryClick = async function() {
            await showFileSystemBrowserDialogAsync('C:\\Users\\', true, false, addMediaLibraryDirectories); // TODO: take path and include hidden elements from settings
        };

        // on add cover image click
        const handleImgAddCoverClick = async function() {
            await showFileSystemBrowserDialogAsync('C:\\Users\\', true, true, addMediaLibraryCoverImage); // TODO: take path and include hidden elements from settings
        };

        // on remove row icon click
        const handleRowRemoval = (e) => {
            if (e.target.matches('.remove-form-table-row-icon')) 
                e.target.parentElement.remove();
        };

        // add listeners
        form.addEventListener('keypress', handleEnterKey);
        form.addEventListener('submit', handleSubmit);
        btnBackToLibraries.addEventListener('click', handleBtnBackToLibrariesClick);
        btnAddNewLibrary.addEventListener('click', handleBtnAddNewLibraryClick);
        imgAddMediaDirectory.addEventListener('click', handleImgAddMediaDirectoryClick);
        imgAddCover.addEventListener('click', handleImgAddCoverClick);
        mediaCoverFormTable.addEventListener('click', handleRowRemoval);
        mediaDirectoriesFormTable.addEventListener('click', handleRowRemoval);

        // register cleanup for these listeners
        cleanupFunctions.push(() => {
            form.removeEventListener('keypress', handleEnterKey);
            form.removeEventListener('submit', handleSubmit);
            btnBackToLibraries.removeEventListener('click', handleBtnBackToLibrariesClick);
            btnAddNewLibrary.removeEventListener('click', handleBtnAddNewLibraryClick);
            imgAddMediaDirectory.removeEventListener('click', handleImgAddMediaDirectoryClick);
            imgAddCover.removeEventListener('click', handleImgAddCoverClick);
            mediaCoverFormTable.removeEventListener('click', handleRowRemoval);
            mediaDirectoriesFormTable.removeEventListener('click', handleRowRemoval);
        });

        // store all cleanups for this view on window object using the scriptId
        window.viewCleanups = window.viewCleanups || {};
        window.viewCleanups['@scriptId'] = () => {
            cleanupFunctions.forEach(cleanup => cleanup());
            console.log(`Unloaded @scriptId`);
        };
        console.log(`Loaded @scriptId`);
    </script>
}
